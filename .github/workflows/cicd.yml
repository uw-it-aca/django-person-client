#
# Example GitHub Actions config for UW-IT AXD2 app testing and publishing to PyPi
#
# Preconditions:
#
#  1) Application contains a setup.py file
#
#  2) Application repo has access to the required secret
#     at https://github.com/organizations/uw-it-aca/settings/secrets:
#
#     PYPI_API_TOKEN
#
# To adapt this config to a specific Python app:
#
#  1) Set APP_NAME to the name of the package name/directory.
#
#  2) Set CONF_PATH to a path containing a urls.py and/or settings.py file
#     used by the test suite, if any
#
#  3) Verify that the lists of branches for push/pull_request is appropriate,
#     and add other branch names if needed.
#
#  4) Update the matrix of django versions to test, if necessary.
#
---
name: Build, Test and Publish

env:
  DJANGO_APP: uw_person_client

on:
  push:
    branches: [main, qa, develop]
  pull_request:
    branches: [main, qa, develop]
    types: [opened, reopened, synchronize]
  release:
    branches: [main]
    types: [published]

jobs:
  context:
    runs-on: ubuntu-22.04

    outputs:
      image_tag: ${{ steps.context.outputs.image_tag }}

    steps:
      - name: Set up Context
        id: context
        uses: uw-it-aca/actions/cicd-context@main
        with:
          release_name: ${{ env.DJANGO_APP }}

  build:
    runs-on: ubuntu-22.04

    needs: context

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Run Python Linters
        uses: uw-it-aca/actions/python-linters@main
        with:
          app_name: ${DJANGO_APP}
          exclude_paths: 'test_migrations'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-$(echo ${{ hashFiles('Dockerfile') }} | head -c 16)
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build App Image
        uses: docker/build-push-action@v3
        with:
          target: app-container
          tags: ${{ needs.context.outputs.image_tag }}
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build Test Image
        uses: docker/build-push-action@v3
        with:
          target: app-test-container
          tags: app-test-container
          push: false
          load: true

      - name: Run Tests in Image
        id: tests
        shell: bash
        run: >-
          docker run -u root -t --network ${{ job.container.network }}
          -v ${PWD}:/coverage
          -e DJANGO_APP="$DJANGO_APP"
          -e "ENV=localdev"
          app-test-container
          bash -c ". ./docker/test.sh"

      - name: Record Test Results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          python -m pip install --upgrade pip coverage coveralls==3.3.1
          coverage combine
          coveralls

  publish:
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')

    needs: build

    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Publish to PyPi
        uses: uw-it-aca/actions/publish-pypi@main
        with:
          app_name: ${DJANGO_APP}
          tag_name: ${{ github.event.release.tag_name }}
          api_token: ${{ secrets.PYPI_API_TOKEN }}
